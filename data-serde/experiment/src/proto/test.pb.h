// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace themis {
namespace benchmarks {
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class TestList;
class TestListDefaultTypeInternal;
extern TestListDefaultTypeInternal _TestList_default_instance_;
class TestWrapper;
class TestWrapperDefaultTypeInternal;
extern TestWrapperDefaultTypeInternal _TestWrapper_default_instance_;
}  // namespace benchmarks
}  // namespace themis
PROTOBUF_NAMESPACE_OPEN
template<> ::themis::benchmarks::Test* Arena::CreateMaybeMessage<::themis::benchmarks::Test>(Arena*);
template<> ::themis::benchmarks::TestList* Arena::CreateMaybeMessage<::themis::benchmarks::TestList>(Arena*);
template<> ::themis::benchmarks::TestWrapper* Arena::CreateMaybeMessage<::themis::benchmarks::TestWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace themis {
namespace benchmarks {

// ===================================================================

class Test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:themis.benchmarks.Test) */ {
 public:
  inline Test() : Test(nullptr) {}
  virtual ~Test();

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test& default_instance();

  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }
  inline void Swap(Test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(nullptr);
  }

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "themis.benchmarks.Test";
  }
  protected:
  explicit Test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // string a = 1;
  void clear_a();
  const std::string& a() const;
  void set_a(const std::string& value);
  void set_a(std::string&& value);
  void set_a(const char* value);
  void set_a(const char* value, size_t size);
  std::string* mutable_a();
  std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // @@protoc_insertion_point(class_scope:themis.benchmarks.Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:themis.benchmarks.TestList) */ {
 public:
  inline TestList() : TestList(nullptr) {}
  virtual ~TestList();

  TestList(const TestList& from);
  TestList(TestList&& from) noexcept
    : TestList() {
    *this = ::std::move(from);
  }

  inline TestList& operator=(const TestList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestList& operator=(TestList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestList& default_instance();

  static inline const TestList* internal_default_instance() {
    return reinterpret_cast<const TestList*>(
               &_TestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestList& a, TestList& b) {
    a.Swap(&b);
  }
  inline void Swap(TestList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestList* New() const final {
    return CreateMaybeMessage<TestList>(nullptr);
  }

  TestList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestList& from);
  void MergeFrom(const TestList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "themis.benchmarks.TestList";
  }
  protected:
  explicit TestList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .themis.benchmarks.Test data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::themis::benchmarks::Test* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::themis::benchmarks::Test >*
      mutable_data();
  private:
  const ::themis::benchmarks::Test& _internal_data(int index) const;
  ::themis::benchmarks::Test* _internal_add_data();
  public:
  const ::themis::benchmarks::Test& data(int index) const;
  ::themis::benchmarks::Test* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::themis::benchmarks::Test >&
      data() const;

  // @@protoc_insertion_point(class_scope:themis.benchmarks.TestList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::themis::benchmarks::Test > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class TestWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:themis.benchmarks.TestWrapper) */ {
 public:
  inline TestWrapper() : TestWrapper(nullptr) {}
  virtual ~TestWrapper();

  TestWrapper(const TestWrapper& from);
  TestWrapper(TestWrapper&& from) noexcept
    : TestWrapper() {
    *this = ::std::move(from);
  }

  inline TestWrapper& operator=(const TestWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestWrapper& operator=(TestWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestWrapper& default_instance();

  static inline const TestWrapper* internal_default_instance() {
    return reinterpret_cast<const TestWrapper*>(
               &_TestWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestWrapper& a, TestWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(TestWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestWrapper* New() const final {
    return CreateMaybeMessage<TestWrapper>(nullptr);
  }

  TestWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestWrapper& from);
  void MergeFrom(const TestWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "themis.benchmarks.TestWrapper";
  }
  protected:
  explicit TestWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // .themis.benchmarks.TestList a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::themis::benchmarks::TestList& a() const;
  ::themis::benchmarks::TestList* release_a();
  ::themis::benchmarks::TestList* mutable_a();
  void set_allocated_a(::themis::benchmarks::TestList* a);
  private:
  const ::themis::benchmarks::TestList& _internal_a() const;
  ::themis::benchmarks::TestList* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::themis::benchmarks::TestList* a);
  ::themis::benchmarks::TestList* unsafe_arena_release_a();

  // @@protoc_insertion_point(class_scope:themis.benchmarks.TestWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::themis::benchmarks::TestList* a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Test

// string a = 1;
inline void Test::clear_a() {
  a_.ClearToEmpty();
}
inline const std::string& Test::a() const {
  // @@protoc_insertion_point(field_get:themis.benchmarks.Test.a)
  return _internal_a();
}
inline void Test::set_a(const std::string& value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:themis.benchmarks.Test.a)
}
inline std::string* Test::mutable_a() {
  // @@protoc_insertion_point(field_mutable:themis.benchmarks.Test.a)
  return _internal_mutable_a();
}
inline const std::string& Test::_internal_a() const {
  return a_.Get();
}
inline void Test::_internal_set_a(const std::string& value) {
  
  a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Test::set_a(std::string&& value) {
  
  a_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:themis.benchmarks.Test.a)
}
inline void Test::set_a(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:themis.benchmarks.Test.a)
}
inline void Test::set_a(const char* value,
    size_t size) {
  
  a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:themis.benchmarks.Test.a)
}
inline std::string* Test::_internal_mutable_a() {
  
  return a_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Test::release_a() {
  // @@protoc_insertion_point(field_release:themis.benchmarks.Test.a)
  return a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:themis.benchmarks.Test.a)
}

// -------------------------------------------------------------------

// TestList

// repeated .themis.benchmarks.Test data = 1;
inline int TestList::_internal_data_size() const {
  return data_.size();
}
inline int TestList::data_size() const {
  return _internal_data_size();
}
inline void TestList::clear_data() {
  data_.Clear();
}
inline ::themis::benchmarks::Test* TestList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:themis.benchmarks.TestList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::themis::benchmarks::Test >*
TestList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:themis.benchmarks.TestList.data)
  return &data_;
}
inline const ::themis::benchmarks::Test& TestList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::themis::benchmarks::Test& TestList::data(int index) const {
  // @@protoc_insertion_point(field_get:themis.benchmarks.TestList.data)
  return _internal_data(index);
}
inline ::themis::benchmarks::Test* TestList::_internal_add_data() {
  return data_.Add();
}
inline ::themis::benchmarks::Test* TestList::add_data() {
  // @@protoc_insertion_point(field_add:themis.benchmarks.TestList.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::themis::benchmarks::Test >&
TestList::data() const {
  // @@protoc_insertion_point(field_list:themis.benchmarks.TestList.data)
  return data_;
}

// -------------------------------------------------------------------

// TestWrapper

// .themis.benchmarks.TestList a = 1;
inline bool TestWrapper::_internal_has_a() const {
  return this != internal_default_instance() && a_ != nullptr;
}
inline bool TestWrapper::has_a() const {
  return _internal_has_a();
}
inline void TestWrapper::clear_a() {
  if (GetArena() == nullptr && a_ != nullptr) {
    delete a_;
  }
  a_ = nullptr;
}
inline const ::themis::benchmarks::TestList& TestWrapper::_internal_a() const {
  const ::themis::benchmarks::TestList* p = a_;
  return p != nullptr ? *p : reinterpret_cast<const ::themis::benchmarks::TestList&>(
      ::themis::benchmarks::_TestList_default_instance_);
}
inline const ::themis::benchmarks::TestList& TestWrapper::a() const {
  // @@protoc_insertion_point(field_get:themis.benchmarks.TestWrapper.a)
  return _internal_a();
}
inline void TestWrapper::unsafe_arena_set_allocated_a(
    ::themis::benchmarks::TestList* a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_);
  }
  a_ = a;
  if (a) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:themis.benchmarks.TestWrapper.a)
}
inline ::themis::benchmarks::TestList* TestWrapper::release_a() {
  
  ::themis::benchmarks::TestList* temp = a_;
  a_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::themis::benchmarks::TestList* TestWrapper::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:themis.benchmarks.TestWrapper.a)
  
  ::themis::benchmarks::TestList* temp = a_;
  a_ = nullptr;
  return temp;
}
inline ::themis::benchmarks::TestList* TestWrapper::_internal_mutable_a() {
  
  if (a_ == nullptr) {
    auto* p = CreateMaybeMessage<::themis::benchmarks::TestList>(GetArena());
    a_ = p;
  }
  return a_;
}
inline ::themis::benchmarks::TestList* TestWrapper::mutable_a() {
  // @@protoc_insertion_point(field_mutable:themis.benchmarks.TestWrapper.a)
  return _internal_mutable_a();
}
inline void TestWrapper::set_allocated_a(::themis::benchmarks::TestList* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    
  } else {
    
  }
  a_ = a;
  // @@protoc_insertion_point(field_set_allocated:themis.benchmarks.TestWrapper.a)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace benchmarks
}  // namespace themis

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
